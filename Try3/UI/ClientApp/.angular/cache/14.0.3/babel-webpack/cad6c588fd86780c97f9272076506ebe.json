{"ast":null,"code":"import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { setInt64, setUint64 } from \"./utils/int.mjs\";\nimport { ensureUint8Array } from \"./utils/typedArrays.mjs\";\nexport var DEFAULT_MAX_DEPTH = 100;\nexport var DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nvar Encoder =\n/** @class */\nfunction () {\n  function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {\n    if (extensionCodec === void 0) {\n      extensionCodec = ExtensionCodec.defaultCodec;\n    }\n\n    if (context === void 0) {\n      context = undefined;\n    }\n\n    if (maxDepth === void 0) {\n      maxDepth = DEFAULT_MAX_DEPTH;\n    }\n\n    if (initialBufferSize === void 0) {\n      initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE;\n    }\n\n    if (sortKeys === void 0) {\n      sortKeys = false;\n    }\n\n    if (forceFloat32 === void 0) {\n      forceFloat32 = false;\n    }\n\n    if (ignoreUndefined === void 0) {\n      ignoreUndefined = false;\n    }\n\n    if (forceIntegerToFloat === void 0) {\n      forceIntegerToFloat = false;\n    }\n\n    this.extensionCodec = extensionCodec;\n    this.context = context;\n    this.maxDepth = maxDepth;\n    this.initialBufferSize = initialBufferSize;\n    this.sortKeys = sortKeys;\n    this.forceFloat32 = forceFloat32;\n    this.ignoreUndefined = ignoreUndefined;\n    this.forceIntegerToFloat = forceIntegerToFloat;\n    this.pos = 0;\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n    this.bytes = new Uint8Array(this.view.buffer);\n  }\n\n  Encoder.prototype.reinitializeState = function () {\n    this.pos = 0;\n  };\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n\n\n  Encoder.prototype.encodeSharedRef = function (object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  };\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n\n\n  Encoder.prototype.encode = function (object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  };\n\n  Encoder.prototype.doEncode = function (object, depth) {\n    if (depth > this.maxDepth) {\n      throw new Error(\"Too deep objects in depth \".concat(depth));\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  };\n\n  Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {\n    var requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  };\n\n  Encoder.prototype.resizeBuffer = function (newSize) {\n    var newBuffer = new ArrayBuffer(newSize);\n    var newBytes = new Uint8Array(newBuffer);\n    var newView = new DataView(newBuffer);\n    newBytes.set(this.bytes);\n    this.view = newView;\n    this.bytes = newBytes;\n  };\n\n  Encoder.prototype.encodeNil = function () {\n    this.writeU8(0xc0);\n  };\n\n  Encoder.prototype.encodeBoolean = function (object) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  };\n\n  Encoder.prototype.encodeNumber = function (object) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | object + 0x20);\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  };\n\n  Encoder.prototype.writeStringHeader = function (byteLength) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(\"Too long string: \".concat(byteLength, \" bytes in UTF-8\"));\n    }\n  };\n\n  Encoder.prototype.encodeString = function (object) {\n    var maxHeaderSize = 1 + 4;\n    var strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      var byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      var byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  };\n\n  Encoder.prototype.encodeObject = function (object, depth) {\n    // try to encode objects with custom codec first of non-primitives\n    var ext = this.extensionCodec.tryToEncode(object, this.context);\n\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(\"Unrecognized object: \".concat(Object.prototype.toString.apply(object)));\n    }\n  };\n\n  Encoder.prototype.encodeBinary = function (object) {\n    var size = object.byteLength;\n\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large binary: \".concat(size));\n    }\n\n    var bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  };\n\n  Encoder.prototype.encodeArray = function (object, depth) {\n    var size = object.length;\n\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large array: \".concat(size));\n    }\n\n    for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {\n      var item = object_1[_i];\n      this.doEncode(item, depth + 1);\n    }\n  };\n\n  Encoder.prototype.countWithoutUndefined = function (object, keys) {\n    var count = 0;\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  Encoder.prototype.encodeMap = function (object, depth) {\n    var keys = Object.keys(object);\n\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large map object: \".concat(size));\n    }\n\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n      var key = keys_2[_i];\n      var value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  };\n\n  Encoder.prototype.encodeExtension = function (ext) {\n    var size = ext.data.length;\n\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(\"Too large extension object: \".concat(size));\n    }\n\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  };\n\n  Encoder.prototype.writeU8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  };\n\n  Encoder.prototype.writeU8a = function (values) {\n    var size = values.length;\n    this.ensureBufferSizeToWrite(size);\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  };\n\n  Encoder.prototype.writeI8 = function (value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  };\n\n  Encoder.prototype.writeU16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  };\n\n  Encoder.prototype.writeI16 = function (value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  };\n\n  Encoder.prototype.writeU32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  };\n\n  Encoder.prototype.writeI32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  };\n\n  Encoder.prototype.writeF32 = function (value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  };\n\n  Encoder.prototype.writeF64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  };\n\n  Encoder.prototype.writeU64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n\n  Encoder.prototype.writeI64 = function (value) {\n    this.ensureBufferSizeToWrite(8);\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  };\n\n  return Encoder;\n}();\n\nexport { Encoder };","map":{"version":3,"names":["utf8EncodeJs","utf8Count","TEXT_ENCODER_THRESHOLD","utf8EncodeTE","ExtensionCodec","setInt64","setUint64","ensureUint8Array","DEFAULT_MAX_DEPTH","DEFAULT_INITIAL_BUFFER_SIZE","Encoder","extensionCodec","context","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","defaultCodec","undefined","pos","view","DataView","ArrayBuffer","bytes","Uint8Array","buffer","prototype","reinitializeState","encodeSharedRef","object","doEncode","subarray","encode","slice","depth","Error","concat","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","byteLength","resizeBuffer","newSize","newBuffer","newBytes","newView","set","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeStringHeader","maxHeaderSize","strLength","length","ext","tryToEncode","encodeExtension","Array","isArray","encodeArray","isView","encodeBinary","encodeMap","Object","toString","apply","size","writeU8a","_i","object_1","item","countWithoutUndefined","keys","count","keys_1","key","sort","keys_2","value","data","type","setUint8","values","setInt8","setUint16","setInt16","setUint32","setInt32","setFloat32","setFloat64"],"sources":["D:/Source/Repos/Chat/Try3/UI/ClientApp/node_modules/@msgpack/msgpack/dist.es5+esm/Encoder.mjs"],"sourcesContent":["import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8.mjs\";\nimport { ExtensionCodec } from \"./ExtensionCodec.mjs\";\nimport { setInt64, setUint64 } from \"./utils/int.mjs\";\nimport { ensureUint8Array } from \"./utils/typedArrays.mjs\";\nexport var DEFAULT_MAX_DEPTH = 100;\nexport var DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nvar Encoder = /** @class */ (function () {\n    function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {\n        if (extensionCodec === void 0) { extensionCodec = ExtensionCodec.defaultCodec; }\n        if (context === void 0) { context = undefined; }\n        if (maxDepth === void 0) { maxDepth = DEFAULT_MAX_DEPTH; }\n        if (initialBufferSize === void 0) { initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE; }\n        if (sortKeys === void 0) { sortKeys = false; }\n        if (forceFloat32 === void 0) { forceFloat32 = false; }\n        if (ignoreUndefined === void 0) { ignoreUndefined = false; }\n        if (forceIntegerToFloat === void 0) { forceIntegerToFloat = false; }\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxDepth = maxDepth;\n        this.initialBufferSize = initialBufferSize;\n        this.sortKeys = sortKeys;\n        this.forceFloat32 = forceFloat32;\n        this.ignoreUndefined = ignoreUndefined;\n        this.forceIntegerToFloat = forceIntegerToFloat;\n        this.pos = 0;\n        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n        this.bytes = new Uint8Array(this.view.buffer);\n    }\n    Encoder.prototype.reinitializeState = function () {\n        this.pos = 0;\n    };\n    /**\n     * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n     *\n     * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n     */\n    Encoder.prototype.encodeSharedRef = function (object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.bytes.subarray(0, this.pos);\n    };\n    /**\n     * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n     */\n    Encoder.prototype.encode = function (object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.bytes.slice(0, this.pos);\n    };\n    Encoder.prototype.doEncode = function (object, depth) {\n        if (depth > this.maxDepth) {\n            throw new Error(\"Too deep objects in depth \".concat(depth));\n        }\n        if (object == null) {\n            this.encodeNil();\n        }\n        else if (typeof object === \"boolean\") {\n            this.encodeBoolean(object);\n        }\n        else if (typeof object === \"number\") {\n            this.encodeNumber(object);\n        }\n        else if (typeof object === \"string\") {\n            this.encodeString(object);\n        }\n        else {\n            this.encodeObject(object, depth);\n        }\n    };\n    Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {\n        var requiredSize = this.pos + sizeToWrite;\n        if (this.view.byteLength < requiredSize) {\n            this.resizeBuffer(requiredSize * 2);\n        }\n    };\n    Encoder.prototype.resizeBuffer = function (newSize) {\n        var newBuffer = new ArrayBuffer(newSize);\n        var newBytes = new Uint8Array(newBuffer);\n        var newView = new DataView(newBuffer);\n        newBytes.set(this.bytes);\n        this.view = newView;\n        this.bytes = newBytes;\n    };\n    Encoder.prototype.encodeNil = function () {\n        this.writeU8(0xc0);\n    };\n    Encoder.prototype.encodeBoolean = function (object) {\n        if (object === false) {\n            this.writeU8(0xc2);\n        }\n        else {\n            this.writeU8(0xc3);\n        }\n    };\n    Encoder.prototype.encodeNumber = function (object) {\n        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n            if (object >= 0) {\n                if (object < 0x80) {\n                    // positive fixint\n                    this.writeU8(object);\n                }\n                else if (object < 0x100) {\n                    // uint 8\n                    this.writeU8(0xcc);\n                    this.writeU8(object);\n                }\n                else if (object < 0x10000) {\n                    // uint 16\n                    this.writeU8(0xcd);\n                    this.writeU16(object);\n                }\n                else if (object < 0x100000000) {\n                    // uint 32\n                    this.writeU8(0xce);\n                    this.writeU32(object);\n                }\n                else {\n                    // uint 64\n                    this.writeU8(0xcf);\n                    this.writeU64(object);\n                }\n            }\n            else {\n                if (object >= -0x20) {\n                    // negative fixint\n                    this.writeU8(0xe0 | (object + 0x20));\n                }\n                else if (object >= -0x80) {\n                    // int 8\n                    this.writeU8(0xd0);\n                    this.writeI8(object);\n                }\n                else if (object >= -0x8000) {\n                    // int 16\n                    this.writeU8(0xd1);\n                    this.writeI16(object);\n                }\n                else if (object >= -0x80000000) {\n                    // int 32\n                    this.writeU8(0xd2);\n                    this.writeI32(object);\n                }\n                else {\n                    // int 64\n                    this.writeU8(0xd3);\n                    this.writeI64(object);\n                }\n            }\n        }\n        else {\n            // non-integer numbers\n            if (this.forceFloat32) {\n                // float 32\n                this.writeU8(0xca);\n                this.writeF32(object);\n            }\n            else {\n                // float 64\n                this.writeU8(0xcb);\n                this.writeF64(object);\n            }\n        }\n    };\n    Encoder.prototype.writeStringHeader = function (byteLength) {\n        if (byteLength < 32) {\n            // fixstr\n            this.writeU8(0xa0 + byteLength);\n        }\n        else if (byteLength < 0x100) {\n            // str 8\n            this.writeU8(0xd9);\n            this.writeU8(byteLength);\n        }\n        else if (byteLength < 0x10000) {\n            // str 16\n            this.writeU8(0xda);\n            this.writeU16(byteLength);\n        }\n        else if (byteLength < 0x100000000) {\n            // str 32\n            this.writeU8(0xdb);\n            this.writeU32(byteLength);\n        }\n        else {\n            throw new Error(\"Too long string: \".concat(byteLength, \" bytes in UTF-8\"));\n        }\n    };\n    Encoder.prototype.encodeString = function (object) {\n        var maxHeaderSize = 1 + 4;\n        var strLength = object.length;\n        if (strLength > TEXT_ENCODER_THRESHOLD) {\n            var byteLength = utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8EncodeTE(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n        else {\n            var byteLength = utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8EncodeJs(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n    };\n    Encoder.prototype.encodeObject = function (object, depth) {\n        // try to encode objects with custom codec first of non-primitives\n        var ext = this.extensionCodec.tryToEncode(object, this.context);\n        if (ext != null) {\n            this.encodeExtension(ext);\n        }\n        else if (Array.isArray(object)) {\n            this.encodeArray(object, depth);\n        }\n        else if (ArrayBuffer.isView(object)) {\n            this.encodeBinary(object);\n        }\n        else if (typeof object === \"object\") {\n            this.encodeMap(object, depth);\n        }\n        else {\n            // symbol, function and other special object come here unless extensionCodec handles them.\n            throw new Error(\"Unrecognized object: \".concat(Object.prototype.toString.apply(object)));\n        }\n    };\n    Encoder.prototype.encodeBinary = function (object) {\n        var size = object.byteLength;\n        if (size < 0x100) {\n            // bin 8\n            this.writeU8(0xc4);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // bin 16\n            this.writeU8(0xc5);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // bin 32\n            this.writeU8(0xc6);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large binary: \".concat(size));\n        }\n        var bytes = ensureUint8Array(object);\n        this.writeU8a(bytes);\n    };\n    Encoder.prototype.encodeArray = function (object, depth) {\n        var size = object.length;\n        if (size < 16) {\n            // fixarray\n            this.writeU8(0x90 + size);\n        }\n        else if (size < 0x10000) {\n            // array 16\n            this.writeU8(0xdc);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // array 32\n            this.writeU8(0xdd);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large array: \".concat(size));\n        }\n        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {\n            var item = object_1[_i];\n            this.doEncode(item, depth + 1);\n        }\n    };\n    Encoder.prototype.countWithoutUndefined = function (object, keys) {\n        var count = 0;\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            if (object[key] !== undefined) {\n                count++;\n            }\n        }\n        return count;\n    };\n    Encoder.prototype.encodeMap = function (object, depth) {\n        var keys = Object.keys(object);\n        if (this.sortKeys) {\n            keys.sort();\n        }\n        var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n        if (size < 16) {\n            // fixmap\n            this.writeU8(0x80 + size);\n        }\n        else if (size < 0x10000) {\n            // map 16\n            this.writeU8(0xde);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // map 32\n            this.writeU8(0xdf);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large map object: \".concat(size));\n        }\n        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n            var key = keys_2[_i];\n            var value = object[key];\n            if (!(this.ignoreUndefined && value === undefined)) {\n                this.encodeString(key);\n                this.doEncode(value, depth + 1);\n            }\n        }\n    };\n    Encoder.prototype.encodeExtension = function (ext) {\n        var size = ext.data.length;\n        if (size === 1) {\n            // fixext 1\n            this.writeU8(0xd4);\n        }\n        else if (size === 2) {\n            // fixext 2\n            this.writeU8(0xd5);\n        }\n        else if (size === 4) {\n            // fixext 4\n            this.writeU8(0xd6);\n        }\n        else if (size === 8) {\n            // fixext 8\n            this.writeU8(0xd7);\n        }\n        else if (size === 16) {\n            // fixext 16\n            this.writeU8(0xd8);\n        }\n        else if (size < 0x100) {\n            // ext 8\n            this.writeU8(0xc7);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // ext 16\n            this.writeU8(0xc8);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // ext 32\n            this.writeU8(0xc9);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(\"Too large extension object: \".concat(size));\n        }\n        this.writeI8(ext.type);\n        this.writeU8a(ext.data);\n    };\n    Encoder.prototype.writeU8 = function (value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setUint8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU8a = function (values) {\n        var size = values.length;\n        this.ensureBufferSizeToWrite(size);\n        this.bytes.set(values, this.pos);\n        this.pos += size;\n    };\n    Encoder.prototype.writeI8 = function (value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setInt8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU16 = function (value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setUint16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeI16 = function (value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setInt16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeU32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setUint32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeI32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setInt32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF32 = function (value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setFloat32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setFloat64(this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeU64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        setUint64(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeI64 = function (value) {\n        this.ensureBufferSizeToWrite(8);\n        setInt64(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    return Encoder;\n}());\nexport { Encoder };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}